// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © spacemanbtc

//@version=5
indicator("Fair Value Gap", shorttitle="Fair Value Gap SpaceManBTC", overlay=true, max_boxes_count=500, max_lines_count=500, max_labels_count=500)

// ———————————————————— Inputs
i_tf = input.timeframe("240", "MTF Timeframe", group="MTF Settings")
i_mtf = input.string(defval="Current TF", group="MTF Settings", title="MTF Options", options=["Current TF", "Current + HTF", "HTF"])
i_tfos = input.int(defval=10, title="Offset", minval=0, maxval=500, group="MTF Settings", inline="OS")
i_mtfos = input.int(defval=20, title="MTF Offset", minval=0, maxval=500, group="MTF Settings", inline="OS")
i_fillByMid = input.bool(false, "MidPoint Fill", group="General Settings", tooltip="When enabled FVG is filled when midpoint is tested")
i_deleteonfill = input.bool(true, "Delete Old On Fill", group="General Settings")
i_labeltf = input.bool(true, "Label FVG Timeframe", group="General Settings")
i_bullishfvgcolor = input.color(color.new(color.green,90), "Bullish FVG", group="Coloring", inline="BLFVG")
i_mtfbullishfvgcolor = input.color(color.new(color.lime,80), "MTF Bullish FVG", group="Coloring", inline="BLFVG")
i_bearishfvgcolor = input.color(color.new(color.red,90), "Bearish FVG", group="Coloring", inline="BRFVG")
i_mtfbearishfvgcolor = input.color(color.new(color.maroon,80), "MTF Bearish FVG", group="Coloring", inline="BRFVG")
i_midPointColor = input.color(color.new(color.white,85), "MidPoint Color", group="Coloring")
i_textColor = input.color(color.white, "Text Color", group="Coloring")
i_highlightCandles = input.bool(true, "Highlight Candles", group="Highlight Settings")

// ———————————————————— Global Data
var htfH = open
var htfL = open
if close > htfH 
    htfH := close
if close < htfL
    htfL := close

sClose = request.security(syminfo.tickerid, i_tf, close[1], barmerge.gaps_off, barmerge.lookahead_on)
sOpen = request.security(syminfo.tickerid, i_tf, open[1], barmerge.gaps_off, barmerge.lookahead_on)
sHighP2 = request.security(syminfo.tickerid, i_tf, high[2], barmerge.gaps_off, barmerge.lookahead_on)
sLowP2 = request.security(syminfo.tickerid, i_tf, low[2], barmerge.gaps_off, barmerge.lookahead_on)
sBar = request.security(syminfo.tickerid, i_tf, bar_index, barmerge.gaps_off, barmerge.lookahead_on)

var bullishgapholder = array.new_box(0)
var bearishgapholder = array.new_box(0)
var bullishmidholder = array.new_line(0)
var bearishmidholder = array.new_line(0)
var bullishlabelholder = array.new_label(0)
var bearishlabelholder = array.new_label(0)
var transparentcolor = color.new(color.white,100)

// ———————————————————— Functions
f_gapCreation(_upperlimit, _lowerlimit, _midlimit, _bar, _boxholder, _midholder, _labelholder, _boxcolor, _mtfboxcolor, _htf) =>
    timeholder = str.tostring(i_tf)
    offset = i_mtfos
    boxbgcolor = _mtfboxcolor
    if _htf == false
        timeholder := str.tostring(timeframe.period)
        offset := i_tfos
        boxbgcolor := _boxcolor
    array.push(_boxholder, box.new(_bar, _upperlimit, _bar+1, _lowerlimit, border_color=transparentcolor, bgcolor=boxbgcolor, extend=extend.right))
    if i_fillByMid 
        array.push(_midholder, line.new(_bar, _midlimit, _bar+1, _midlimit, color=i_midPointColor, extend=extend.right))
    if i_labeltf
        array.push(_labelholder, label.new(_bar + offset, _midlimit * 0.999, text=timeholder + " FVG", style=label.style_none, size=size.normal, textcolor=i_textColor))

f_gapLogic(_close, _high, _highp2, _low, _lowp2, _open, _bar, _htf) =>
    if _open > _close
        if _high - _lowp2 < 0
            upperlimit = _close - (_close - _lowp2)
            lowerlimit = _close - (_close - _high)
            midlimit = (upperlimit + lowerlimit) / 2
            f_gapCreation(upperlimit, lowerlimit, midlimit, _bar, bullishgapholder, bullishmidholder, bullishlabelholder, i_bullishfvgcolor, i_mtfbullishfvgcolor, _htf)
    else
        if _low - _highp2 > 0
            upperlimit = _close - (_close - _low)
            lowerlimit = _close - (_close - _highp2)
            midlimit = (upperlimit + lowerlimit) / 2
            f_gapCreation(upperlimit, lowerlimit, midlimit, _bar, bearishgapholder, bearishmidholder, bearishlabelholder, i_bearishfvgcolor, i_mtfbearishfvgcolor, _htf)

f_gapDeletion(_currentgap, _i, _boxholder, _midholder, _labelholder) =>
    array.remove(_boxholder, _i)
    if i_fillByMid
        currentmid = array.get(_midholder, _i)
        array.remove(_midholder, _i)
        if i_deleteonfill
            line.delete(currentmid)
        else
            line.set_extend(currentmid, extend.none)
            line.set_x2(currentmid, bar_index)
    if i_deleteonfill
        box.delete(_currentgap)
    else
        box.set_extend(_currentgap, extend.none)
        box.set_right(_currentgap, bar_index)
    if i_labeltf
        currentlabel = array.get(_labelholder, _i)
        array.remove(_labelholder, _i)
        if i_deleteonfill
            label.delete(currentlabel)

f_gapCheck(_high, _low) =>
    if array.size(bullishgapholder) > 0
        for i = array.size(bullishgapholder)-1 to 0
            currentgap = array.get(bullishgapholder, i)
            currenttop = box.get_top(currentgap)
            if i_fillByMid 
                currentmid = array.get(bullishmidholder, i)
                currenttop := line.get_y1(currentmid)
            if _high >= currenttop
                f_gapDeletion(currentgap, i, bullishgapholder, bullishmidholder, bullishlabelholder)
            if _high > box.get_bottom(currentgap) and _high < box.get_top(currentgap)
                box.set_bottom(currentgap, _high)
    if array.size(bearishgapholder) > 0
        for i = array.size(bearishgapholder)-1 to 0
            currentgap = array.get(bearishgapholder, i)
            currentbottom = box.get_bottom(currentgap)
            if i_fillByMid 
                currentmid = array.get(bearishmidholder, i)
                currentbottom := line.get_y1(currentmid)           
            if _low <= currentbottom
                f_gapDeletion(currentgap, i, bearishgapholder, bearishmidholder, bearishlabelholder)
            if _low < box.get_top(currentgap) and _low > box.get_bottom(currentgap)
                box.set_top(currentgap, _low)

// Function to check if a candlestick wicks into bullish FVG
f_wicksIntoBullishFVG(_high) =>
    wicksIntoBullish = false
    if array.size(bullishgapholder) > 0
        for i = 0 to array.size(bullishgapholder) - 1
            fvg = array.get(bullishgapholder, i)
            bottom = box.get_bottom(fvg)
            top = box.get_top(fvg)
            if _high > bottom and _high < top
                wicksIntoBullish := true
                break
    wicksIntoBullish

// Function to check if a candlestick wicks into bearish FVG
f_wicksIntoBearishFVG(_low) =>
    wicksIntoBearish = false
    if array.size(bearishgapholder) > 0
        for i = 0 to array.size(bearishgapholder) - 1
            fvg = array.get(bearishgapholder, i)
            bottom = box.get_bottom(fvg)
            top = box.get_top(fvg)
            if _low < top and _low > bottom
                wicksIntoBearish := true
                break
    wicksIntoBearish

is_newbar(res) =>
    t = time(res)
    not na(t) and (na(t[1]) or t > t[1])

if is_newbar(i_tf)
    htfH := open
    htfL := open

// ———————————————————— Main Logic
if is_newbar(i_tf) and (i_mtf == "Current + HTF" or i_mtf == "HTF")
    f_gapLogic(sClose, htfH, sHighP2, htfL, sLowP2, sOpen, bar_index, true)

if (i_mtf == "Current + HTF" or i_mtf == "Current TF")
    f_gapLogic(close[1], high, high[2], low, low[2], open[1], bar_index, false)

// Fetch 15-minute candle data for highlighting
[high_15m, low_15m, close_15m, open_15m] = request.security(syminfo.tickerid, "15", [high, low, close, open], barmerge.gaps_off, barmerge.lookahead_on)

// Highlighting logic for Candlestick1 and Candlestick2 using 15m data
if i_highlightCandles
    // Use 15m data for all conditions
    _high = high_15m
    _low = low_15m
    _close = close_15m
    _high1 = high_15m[1]
    _low1 = low_15m[1]
    _close1 = close_15m[1]

    // Common C2 conditions
    c2_not_wicking = not f_wicksIntoBullishFVG(_high1) and not f_wicksIntoBearishFVG(_low1)
    c2_small_range = (_high1 - _low1) / _close1 <= 0.003
    c1_closes_within_c2 = _close <= _high1 and _close >= _low1

    // Bullish case: C1 wicks into bullish FVG and C1 high > C2 high
    if f_wicksIntoBullishFVG(_high) and _high > _high1 and c2_not_wicking and c2_small_range and c1_closes_within_c2
        label.new(bar_index, high, "C1", style=label.style_label_down, color=color.blue)
        label.new(bar_index - 1, high[1], "C2", style=label.style_label_down, color=color.blue)

    // Bearish case: C1 wicks into bearish FVG and C1 low < C2 low
    if f_wicksIntoBearishFVG(_low) and _low < _low1 and c2_not_wicking and c2_small_range and c1_closes_within_c2
        label.new(bar_index, low, "C1", style=label.style_label_up, color=color.red)
        label.new(bar_index - 1, low[1], "C2", style=label.style_label_up, color=color.red)

f_gapCheck(high, low)